"use client"
import { useState, useEffect, useRef, RefObject } from 'react';
import styles from '../styles/pages/home.module.scss';
import stylesTalking from '../styles/components/talking-character.module.scss';
import { Header } from '../components/Header';
import { NavigationSettings } from '../components/NavigationSettings';
import { useSelector } from 'react-redux';
import { RootState } from "@/store/store";
import { TalkingCharacter } from '../components/TalkingCharacter';
import { useVoiceRecorder } from '@/hooks/useVoiceRecorder';

type TypeSpeakTextProps = {
  question?: string;
  requestQuestion?: string;
  languageChoice: string;
  aiElementRef: RefObject<HTMLElement | null>;
  setIsSpeaking: React.Dispatch<React.SetStateAction<boolean>>;
  setLastSpeaking: React.Dispatch<React.SetStateAction<boolean>>;
}

const speakText = ({ question, requestQuestion, languageChoice, aiElementRef, setIsSpeaking, setLastSpeaking }: TypeSpeakTextProps) => {
  if (requestQuestion) setLastSpeaking(true)
  const textToSpeak = question || requestQuestion;
  const utterance = new SpeechSynthesisUtterance(textToSpeak);
  utterance.lang = languageChoice;
  setIsSpeaking(true)
  speechSynthesis.speak(utterance);

  utterance.onend = () => {
    setIsSpeaking(false)
    aiElementRef.current?.classList.remove(stylesTalking['ai-container-active'])
  };
};


const Home = () => {
  const [isSpeaking, setIsSpeaking] = useState<boolean>(false);
  const [isLastSpeaking, setLastSpeaking] = useState<boolean>(false)
  const [questionGeneratorInput, setQuestionGeneratorInput] = useState<string>('')
  const [questionToCheck, setQuestionToCheck] = useState<string>('')
  const [requestQuestionsList, setRequestQuestionsList] = useState<string[] | []>([])
  const [requestQuestion, setRequestQuestion] = useState<string>('')
  const [question, setQuestion] = useState<string>('')
  const [answer, setAnswer] = useState<string>('')
  const [start, setStart] = useState<boolean>(false);
  const [nextQuestion, setNextQuestion] = useState<boolean>(false)

  const languageChoice = useSelector((state: RootState) => state.settings.language)
  const professionChoice = useSelector((state: RootState) => state.settings.profession)
  const categoryChoice = useSelector((state: RootState) => state.settings.category)

  const countQuestionRef = useRef<number>(0)
  const aiElementRef = useRef<HTMLDivElement | null>(null)
  const userElementRef = useRef<HTMLDivElement | null>(null)

  const { isRecording, transcript, startRecording, stopRecording } = useVoiceRecorder({ languageChoice });

  // –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –≤—ñ–¥—Ä–∞–∑—É –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—ñ–∑–ª—è —Ä–µ–Ω–¥–µ—Ä—É!
  useEffect(() => {
    if ((question || requestQuestion) && start) {

      if ((question || requestQuestion) && start && !isLastSpeaking) {
        handleSpeekAi();
      }

      if (requestQuestion) {
        setQuestion('')
      }
    }
  }, [question, requestQuestion, start, isLastSpeaking]);

  //–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω—å –¥–ª—è —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É!
  useEffect(() => {
    const generateQuestion: string = `–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ 25 –∑–∞–ø–∏—Ç–∞–Ω—å, —è–∫—ñ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –∑–∞–¥–∞—é—Ç—å –Ω–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∞—Ö –¥–ª—è ${categoryChoice}, –Ω–∞ –º–æ–≤—ñ ${languageChoice}. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–∞–Ω–∞–¥—Ç–æ —Å–∫–ª–∞–¥–Ω—ñ –∞–±–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∞ –Ω–∞–¥–∞–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ –∑–∞–∑–≤–∏—á–∞–π –∑–∞–¥–∞—é—Ç—å –¥–ª—è —Ü—ñ—î—ó –ø—Ä–æ—Ñ–µ—Å—ñ—ó –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.`
    setQuestionGeneratorInput(generateQuestion)
  }, [languageChoice, professionChoice, categoryChoice])

  // –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —á–∏ –≤—ñ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!
  useEffect(() => {
    if (answer) {
      const check = `–ü–∏—Ç–∞–Ω–Ω—è: ${question}. –ú–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${answer}. –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ü—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —á—ñ—Ç–∫–æ, –∫–æ—Ä–æ—Ç–∫–æ —ñ –±–µ–∑ –∑–∞–π–≤–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å –Ω–∞ ${languageChoice} –º–æ–≤–æ—é..`;
      setQuestionToCheck(check);
    }
  }, [answer, questionToCheck]);

  // –∑–∞–ø–∏—Å–∞—Ç–∏  –ø–∏—Ç–∞–Ω–Ω—è –∑ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç–∞–Ω—å
  useEffect(() => {
    if (start && requestQuestionsList.length > 0) {
      setQuestion(requestQuestionsList[countQuestionRef.current])
    } else {
      countQuestionRef.current = 0
      setQuestion('')
    }

    setNextQuestion(false)
  }, [requestQuestionsList, nextQuestion, start]);

  // –ó–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —Å—Ç–µ–π—Ç!
  useEffect(() => {
    if (!isRecording && transcript) {
      setAnswer(transcript)
      userElementRef.current?.classList.remove(stylesTalking['user-container-active']);
    }
  }, [isRecording, transcript])

  // –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–æ–≤—ñ—Ä–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!
  useEffect(() => {
    if (questionToCheck) {
      handleSubmit();
    }
  }, [questionToCheck]);

  //–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å—É –≥–æ–ª–æ—Å—É
  const handleStartRecordingVoice = () => {
    if (isRecording) {
      stopRecording()
    } else {
      startRecording()
      if (userElementRef.current) {
        userElementRef.current.classList.add(stylesTalking['user-container-active']);
      }
    }
  }

  //–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø–∏—Ç –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
  const handleSubmit = async () => {
    setStart(true)
    const res = await fetch('/api/ai', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        messages: [
          { role: 'user', content: questionToCheck ? questionToCheck : questionGeneratorInput }
        ],
      }),
    });

    const data = await res.json();

    if (data) {
      if (questionToCheck) {
        setRequestQuestion(data.response.replace(/\*\*/g, '').trim())
      } else {
        setRequestQuestionsList(data.response
          .split('\n')
          .filter((line: string) => /^\d+\.\s/.test(line))
          .map((line: string) =>
            line
              .replace(/^\d+\.\s*/, '')
              .replace(/\*\*/g, '')
              .trim()
          )
        )
      }
    }
  };

  //–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —á–∏—Ç–∞–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ê–Ü
  const handleSpeekAi = () => {
    if (aiElementRef.current) {
      aiElementRef.current.classList.add(stylesTalking['ai-container-active'])
    }
    if (requestQuestion) {
      speakText({ requestQuestion, languageChoice, aiElementRef, setIsSpeaking, setLastSpeaking });
    } else {
      speakText({ question, languageChoice, aiElementRef, setIsSpeaking, setLastSpeaking });
    }
  }

  //–§—É–Ω–∫—Ü—ñ—è –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
  const handleNextAnswer = () => {
    countQuestionRef.current += 1;
    setAnswer('')
    setRequestQuestion('')
    setLastSpeaking(false)
    speechSynthesis.cancel();

    if (countQuestionRef.current < requestQuestionsList.length) {
      setNextQuestion(true)
    } else {
      handleStop();
    }
  }

  //–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–ø—ñ–≤–±–µ—Å—ñ–¥—É
  const handleStop = () => {
    speechSynthesis.cancel();
    setIsSpeaking(false);
    setRequestQuestionsList([]);
    setRequestQuestion('');
    setQuestionToCheck('')
    setQuestion('');
    setAnswer('');
    setStart(false);
    setLastSpeaking(false);
  };

  return (
    <div className={styles.wrapper}>
      <Header />
      <NavigationSettings onClick={handleSubmit} hideSetting={start} />
      <main className={styles.main}>
        {start &&
          <>
            {requestQuestionsList.length === 0
              ? (
                <section className={styles['block-loading']}>
                  <p>–¢—ñ–ª—å–∫–∏ –Ω–µ –ø–∞–Ω—ñ–∫—É–π—Ç–µ‚Ä¶ —â–µ —î —à–∞–Ω—Å –≤—Ç–µ–∫—Ç–∏. –ñ–∞—Ä—Ç—É—é ‚Äî –≤–∂–µ –ø—ñ–∑–Ω–æ üòÅ –ü–æ—á–∏–Ω–∞—î–º–æ!</p>
                  <div className={styles.strip}></div>
                </section>
              ) : (
                <section className={styles['section-content']}>
                  <>
                    <div className={(isRecording || isSpeaking || answer) ? `${styles['block-character']} ${styles.disabled}` : `${styles['block-character']}`}>
                      <TalkingCharacter person='aiSpeechBubble' ref={aiElementRef} onClick={handleSpeekAi} />
                      <TalkingCharacter person='userSpeechBubble' ref={userElementRef} onClick={handleStartRecordingVoice} />
                    </div>
                    <div className={styles['text-block']}>
                      <p className={styles.question}>{requestQuestion ? requestQuestion : question}</p>
                      <p className={answer ? styles.answer : styles['answer-empty']}>{answer}</p>
                    </div>
                  </>
                  <div className={styles['block-button']}>
                    <button onClick={handleNextAnswer}>–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è</button>
                    <button onClick={handleStop}>–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Å–ø—ñ–≤–±–µ—Å—ñ–¥—É</button>
                  </div>
                </section>
              )}
          </>
        }
      </main>
    </div>
  );
};

export default Home;